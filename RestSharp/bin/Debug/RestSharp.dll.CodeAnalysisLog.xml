<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 12.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="12.0">
 <Namespaces>
  <Namespace Name="RestSharp.Authenticators">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'RestSharp.Authenticators' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="RestSharp.Authenticators.OAuth">
   <Messages>
    <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in namespace name 'RestSharp.Authenticators.OAuth'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="RestSharp.Contrib">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'RestSharp.Contrib' with another namespace.</Issue>
    </Message>
    <Message Id="Contrib" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Contrib' in namespace name 'RestSharp.Contrib'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="RestSharp.Deserializers">
   <Messages>
    <Message Id="Deserializers" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Deserializers' in namespace name 'RestSharp.Deserializers'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="RestSharp.Validation">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'RestSharp.Validation' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\bin\Debug\RestSharp.dll">
   <Modules>
    <Module Name="restsharp.dll">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'RestSharp.dll' with a strong name key.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="RestSharp">
       <Types>
        <Type Name="DateFormat" Kind="Struct" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
           <Issue Name="Equals" Certainty="75" Level="Warning">'DateFormat' should override Equals.</Issue>
           <Issue Name="op_Equality" Certainty="75" Level="Warning">'DateFormat' should override the equality (==) and inequality (!=) operators.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Iso8601" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Iso" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Iso' in member name 'DateFormat.Iso8601' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RoundTrip" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="RoundTrip" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'RoundTrip' in member name 'DateFormat.RoundTrip' exists as a discrete term. If your usage is intended to be single word, case it as 'Roundtrip' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="FileParameter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(System.String,System.Byte[],System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="FileParameter.cs" Line="42">In member 'FileParameter.Create(string, byte[], string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Create(System.String,System.Byte[],System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="filename" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="FileParameter.cs" Line="55">In member 'FileParameter.Create(string, byte[], string, string)', the discrete term 'filename' in parameter name 'filename' should be expressed as a compound word, 'fileName'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="FileParameter.cs" Line="57">In externally visible method 'FileParameter.Create(string, byte[], string, string)', validate parameter 'data' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Http" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddAsyncHeaderActions()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Async.cs" Line="385">'Http.AddAsyncHeaderActions()' appears to have no upstream public or protected callers.</Issue>
            </Message>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Async.cs" Line="385">The 'this' parameter (or 'Me' in Visual Basic) of 'Http.AddAsyncHeaderActions()' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddRange(System.Net.HttpWebRequest,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToInt32(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.cs" Line="485">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'Http.AddRange(HttpWebRequest, string)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.cs" Line="486">Because the behavior of 'Convert.ToInt32(string)' could vary based on the current user's locale settings, replace this call in 'Http.AddRange(HttpWebRequest, string)' with a call to 'Convert.ToInt32(string, IFormatProvider)'. If the result of 'Convert.ToInt32(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddSyncHeaderActions()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToDateTime(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Sync.cs" Line="154">Because the behavior of 'Convert.ToDateTime(string)' could vary based on the current user's locale settings, replace this call in 'Http.AddSyncHeaderActions()' with a call to 'Convert.ToDateTime(string, IFormatProvider)'. If the result of 'Convert.ToDateTime(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.Convert.ToInt64(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Sync.cs" Line="152">Because the behavior of 'Convert.ToInt64(string)' could vary based on the current user's locale settings, replace this call in 'Http.AddSyncHeaderActions()' with a call to 'Convert.ToInt64(string, IFormatProvider)'. If the result of 'Convert.ToInt64(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AsGet(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Sync.cs" Line="108">In externally visible method 'Http.AsGet(string)', validate parameter 'httpMethod' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AsGetAsync(System.Action`1&lt;RestSharp.HttpResponse&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Async.cs" Line="112">In externally visible method 'Http.AsGetAsync(Action&lt;HttpResponse&gt;, string)', validate parameter 'httpMethod' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AsPost(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Sync.cs" Line="122">In externally visible method 'Http.AsPost(string)', validate parameter 'httpMethod' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AsPostAsync(System.Action`1&lt;RestSharp.HttpResponse&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Async.cs" Line="97">In externally visible method 'Http.AsPostAsync(Action&lt;HttpResponse&gt;, string)', validate parameter 'httpMethod' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClientCertificates" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'Http.ClientCertificates' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtractErrorResponse(RestSharp.HttpResponse,System.Exception)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Sync.cs" Line="161">The 'this' parameter (or 'Me' in Visual Basic) of 'Http.ExtractErrorResponse(HttpResponse, Exception)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtractResponseData(RestSharp.HttpResponse,System.Net.HttpWebResponse)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.cs" Line="459">Object 'this' can be disposed more than once in method 'Http.ExtractResponseData(HttpResponse, HttpWebResponse)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 459</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMultipartFileHeader(RestSharp.HttpFile)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.cs" Line="266">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'Http.GetMultipartFileHeader(HttpFile)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMultipartFooter()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.cs" Line="281">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'Http.GetMultipartFooter()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMultipartFormContentType()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.cs" Line="261">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Http.GetMultipartFormContentType()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetMultipartFormData(RestSharp.HttpParameter)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.cs" Line="276">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'Http.GetMultipartFormData(HttpParameter)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetResponse(System.Net.HttpWebRequest)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Sync.cs" Line="186">Modify 'Http.GetResponse(HttpWebRequest)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetStyleMethodInternalAsync(System.String,System.Action`1&lt;RestSharp.HttpResponse&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Async.cs" Line="140">Modify 'Http.GetStyleMethodInternalAsync(string, Action&lt;HttpResponse&gt;)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PutPostInternalAsync(System.String,System.Action`1&lt;RestSharp.HttpResponse&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Async.cs" Line="175">Modify 'Http.PutPostInternalAsync(string, Action&lt;HttpResponse&gt;)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RequestStreamCallback(System.IAsyncResult,System.Action`1&lt;RestSharp.HttpResponse&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Async.cs" Line="260">Modify 'Http.RequestStreamCallback(IAsyncResult, Action&lt;HttpResponse&gt;)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ResponseCallback(System.IAsyncResult,System.Action`1&lt;RestSharp.HttpResponse&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Http.Async.cs" Line="363">Modify 'Http.ResponseCallback(IAsyncResult, Action&lt;HttpResponse&gt;)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HttpBasicAuthenticator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="HttpBasicAuthenticator.cs" Line="27">In member 'HttpBasicAuthenticator.HttpBasicAuthenticator(string, string)', the discrete term 'username' in parameter name 'username' should be expressed as a compound word, 'userName'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="HttpBasicAuthenticator.cs" Line="30">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'HttpBasicAuthenticator.HttpBasicAuthenticator(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="HttpBasicAuthenticator.cs" Line="29">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'HttpBasicAuthenticator.HttpBasicAuthenticator(string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Authenticate(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="HttpBasicAuthenticator.cs" Line="43">In externally visible method 'HttpBasicAuthenticator.Authenticate(IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HttpCookie" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TimeStamp" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TimeStamp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'TimeStamp' in member name 'HttpCookie.TimeStamp' exists as a discrete term. If your usage is intended to be single word, case it as 'Timestamp' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IHttp" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ClientCertificates" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'IHttp.ClientCertificates' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Get" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IHttp.Get()' so that it no longer conflicts with the reserved language keyword 'Get'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RequestBodyBytes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'IHttp.RequestBodyBytes' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IHttpResponse" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RawBytes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'IHttpResponse.RawBytes' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IRestClient" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddHandler(System.String,RestSharp.Deserializers.IDeserializer)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="deserializer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning">In method 'IRestClient.AddHandler(string, IDeserializer)', correct the spelling of 'deserializer' in parameter name 'deserializer' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="AddHandler" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IRestClient.AddHandler(string, IDeserializer)' so that it no longer conflicts with the reserved language keyword 'AddHandler'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClientCertificates" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'IRestClient.ClientCertificates' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsync`1(RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRestClient.ExecuteAsync&lt;T&gt;(IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsyncGet`1(RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRestClient.ExecuteAsyncGet&lt;T&gt;(IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;, string)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsyncPost`1(RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRestClient.ExecuteAsyncPost&lt;T&gt;(IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;, string)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveHandler(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="RemoveHandler" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IRestClient.RemoveHandler(string)' so that it no longer conflicts with the reserved language keyword 'RemoveHandler'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IRestRequest" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddBody(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'IRestRequest.AddBody(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddBody(System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'IRestRequest.AddBody(object, string)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFile(System.String,System.Action`1&lt;System.IO.Stream&gt;,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IRestRequest.AddFile(string, Action&lt;Stream&gt;, string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFile(System.String,System.Byte[],System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IRestRequest.AddFile(string, byte[], string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'IRestRequest.AddFile(string, byte[], string, string)', consider replacing the data type identifier 'bytes' in parameter name 'bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFile(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IRestRequest.AddFile(string, string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddJsonBody(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'IRestRequest.AddJsonBody(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddObject(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'IRestRequest.AddObject(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddObject(System.Object,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'IRestRequest.AddObject(object, params string[])', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddParameter(RestSharp.Parameter)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="p" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">In method 'IRestRequest.AddParameter(Parameter)', consider providing a more meaningful name than parameter name 'p'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddXmlBody(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'IRestRequest.AddXmlBody(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddXmlBody(System.Object,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'IRestRequest.AddXmlBody(object, string)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Files" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;FileParameter&gt;' in 'IRestRequest.Files' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IncreaseNumAttempts()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Num" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Num' in member name 'IRestRequest.IncreaseNumAttempts()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parameters" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Parameter&gt;' in 'IRestRequest.Parameters' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IRestResponse" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RawBytes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'IRestResponse.RawBytes' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Method" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#DELETE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="DELETE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'DELETE' in member name 'Method.DELETE' by changing it to 'Delete'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GET" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="GET" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'GET' in member name 'Method.GET' by changing it to 'Get'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HEAD" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="HEAD" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'HEAD' in member name 'Method.HEAD' by changing it to 'Head'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MERGE" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="MERGE" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'MERGE' in member name 'Method.MERGE' by changing it to 'Merge'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OPTIONS" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="OPTIONS" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'OPTIONS' in member name 'Method.OPTIONS' by changing it to 'Options'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PATCH" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="PATCH" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PATCH' in member name 'Method.PATCH' by changing it to 'Patch'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#POST" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="POST" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'POST' in member name 'Method.POST' by changing it to 'Post'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PUT" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="PUT" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'PUT' in member name 'Method.PUT' by changing it to 'Put'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NtlmAuthenticator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="NtlmAuthenticator.cs" Line="42">In member 'NtlmAuthenticator.NtlmAuthenticator(string, string)', the discrete term 'username' in parameter name 'username' should be expressed as a compound word, 'userName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Authenticate(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="NtlmAuthenticator.cs" Line="59">In externally visible method 'NtlmAuthenticator.Authenticate(IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OAuth2Authenticator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in type name 'OAuth2Authenticator'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="OAuth2AuthorizationRequestHeaderAuthenticator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in type name 'OAuth2AuthorizationRequestHeaderAuthenticator'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Authenticate(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth2Authenticator.cs" Line="126">In externally visible method 'OAuth2AuthorizationRequestHeaderAuthenticator.Authenticate(IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OAuth2UriQueryParameterAuthenticator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in type name 'OAuth2UriQueryParameterAuthenticator'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Authenticate(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth2Authenticator.cs" Line="81">In externally visible method 'OAuth2UriQueryParameterAuthenticator.Authenticate(IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Parameter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="Parameter.cs" Line="45">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'Parameter.ToString()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Type" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="BaseType" Certainty="95" Level="Error">The property name 'Parameter.Type' is confusing given the existence of inherited method 'object.GetType()'. Rename or remove this property.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RestClient" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="163">'RestClient.RestClient(string)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;RestClient..ctor(String)&#xD;&#xA;RestClient.set_BaseUrl(Uri):Void</Issue>
            </Message>
            <Message TypeName="StringUriOverloadsCallSystemUriOverloads" Category="Microsoft.Design" CheckId="CA1057" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="163">Refactor 'RestClient.RestClient(string)' so that it builds a System.Uri object from 'baseUrl', and then calls 'RestClient.RestClient(Uri)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Uri)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="154">'RestClient.RestClient(Uri)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;RestClient..ctor(Uri)&#xD;&#xA;RestClient.set_BaseUrl(Uri):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#BuildUri(RestSharp.IRestRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Reserved" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="286">'RestClient.BuildUri(IRestRequest)' creates an exception of type 'NullReferenceException', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="BaseUrl" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="286">Correct the spelling of the unrecognized token 'BaseUrl' in the literal '"RestClient must contain a value for BaseUrl"'.</Issue>
            </Message>
            <Message Id="RestClient" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="286">Correct the spelling of the unrecognized token 'RestClient' in the literal '"RestClient must contain a value for BaseUrl"'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="296">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'RestClient.BuildUri(IRestRequest)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="319">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'RestClient.BuildUri(IRestRequest)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="316">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'RestClient.BuildUri(IRestRequest)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="309">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'RestClient.BuildUri(IRestRequest)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="288">In externally visible method 'RestClient.BuildUri(IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ClientCertificates" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'RestClient.ClientCertificates' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConfigureHttp(RestSharp.IRestRequest,RestSharp.IHttp)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="365">'RestClient.ConfigureHttp(IRestRequest, IHttp)' has a cyclomatic complexity of 43. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="505">'val', a variable, is cast to type 'byte[]' multiple times in method 'RestClient.ConfigureHttp(IRestRequest, IHttp)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="ToUpperInvariant" Certainty="90" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="390">In method 'RestClient.ConfigureHttp(IRestRequest, IHttp)', replace the call to 'string.ToLowerInvariant()' with String.ToUpperInvariant().</Issue>
            </Message>
            <Message Id="System.Convert.ToString(System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="440">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'RestClient.ConfigureHttp(IRestRequest, IHttp)' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="453">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'RestClient.ConfigureHttp(IRestRequest, IHttp)' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="467">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'RestClient.ConfigureHttp(IRestRequest, IHttp)' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="507">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'RestClient.ConfigureHttp(IRestRequest, IHttp)' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="511">Because the behavior of 'Convert.ToString(object)' could vary based on the current user's locale settings, replace this call in 'RestClient.ConfigureHttp(IRestRequest, IHttp)' with a call to 'Convert.ToString(object, IFormatProvider)'. If the result of 'Convert.ToString(object, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Deserialize`1(RestSharp.IRestRequest,RestSharp.IRestResponse)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.cs" Line="616">Modify 'RestClient.Deserialize&lt;T&gt;(IRestRequest, IRestResponse)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeserializeResponse`1(RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;,RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.Async.cs" Line="176">Modify 'RestClient.DeserializeResponse&lt;T&gt;(IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;, IRestResponse, RestRequestAsyncHandle)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(RestSharp.IRestRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.Sync.cs" Line="29">In externally visible method 'RestClient.Execute(IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Execute(RestSharp.IRestRequest,System.String,System.Func`3&lt;RestSharp.IHttp,System.String,RestSharp.HttpResponse&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.Sync.cs" Line="73">Modify 'RestClient.Execute(IRestRequest, string, Func&lt;IHttp, string, HttpResponse&gt;)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsPost(RestSharp.IRestRequest,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.Sync.cs" Line="51">In externally visible method 'RestClient.ExecuteAsPost(IRestRequest, string)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsync(RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.Async.cs" Line="40">In externally visible method 'RestClient.ExecuteAsync(IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsyncPost(RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle&gt;,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.Async.cs" Line="77">In externally visible method 'RestClient.ExecuteAsyncPost(IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;, string)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HttpFactory" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RestClient.HttpFactory' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ProcessResponse(RestSharp.IRestRequest,RestSharp.HttpResponse,RestSharp.RestRequestAsyncHandle,System.Action`2&lt;RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClient.Async.cs" Line="120">The 'this' parameter (or 'Me' in Visual Basic) of 'RestClient.ProcessResponse(IRestRequest, HttpResponse, RestRequestAsyncHandle, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RestClientExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddDefaultParameter(RestSharp.IRestClient,RestSharp.Parameter)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="p" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="269">In method 'RestClientExtensions.AddDefaultParameter(this IRestClient, Parameter)', consider providing a more meaningful name than parameter name 'p'.</Issue>
            </Message>
            <Message Id="AddBody" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="272">Correct the spelling of the unrecognized token 'AddBody' in the literal '"Cannot set request body from default headers. Use Request.AddBody() instead."'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="276">In externally visible method 'RestClientExtensions.AddDefaultParameter(this IRestClient, Parameter)', validate parameter 'restClient' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="270">In externally visible method 'RestClientExtensions.AddDefaultParameter(this IRestClient, Parameter)', validate parameter 'p' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Delete(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="258">In externally visible method 'RestClientExtensions.Delete(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="257">In externally visible method 'RestClientExtensions.Delete(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Delete`1(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="216">In externally visible method 'RestClientExtensions.Delete&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="215">In externally visible method 'RestClientExtensions.Delete&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteAsync(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="131">In externally visible method 'RestClientExtensions.DeleteAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="130">In externally visible method 'RestClientExtensions.DeleteAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DeleteAsync`1(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="80">Consider a design where 'RestClientExtensions.DeleteAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="82">In externally visible method 'RestClientExtensions.DeleteAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="81">In externally visible method 'RestClientExtensions.DeleteAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsync(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`1&lt;RestSharp.IRestResponse&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="20">In externally visible method 'RestClientExtensions.ExecuteAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteAsync`1(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`1&lt;RestSharp.IRestResponse`1&lt;!!0&gt;&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="32">Consider a design where 'RestClientExtensions.ExecuteAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;&gt;)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;&gt;'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="33">In externally visible method 'RestClientExtensions.ExecuteAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="222">In externally visible method 'RestClientExtensions.Get(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="221">In externally visible method 'RestClientExtensions.Get(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Get`1(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="180">In externally visible method 'RestClientExtensions.Get&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="179">In externally visible method 'RestClientExtensions.Get&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAsync(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="89">In externally visible method 'RestClientExtensions.GetAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="88">In externally visible method 'RestClientExtensions.GetAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAsync`1(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="38">Consider a design where 'RestClientExtensions.GetAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="40">In externally visible method 'RestClientExtensions.GetAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="39">In externally visible method 'RestClientExtensions.GetAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Head(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="240">In externally visible method 'RestClientExtensions.Head(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="239">In externally visible method 'RestClientExtensions.Head(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Head`1(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="198">In externally visible method 'RestClientExtensions.Head&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="197">In externally visible method 'RestClientExtensions.Head&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HeadAsync(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="110">In externally visible method 'RestClientExtensions.HeadAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="109">In externally visible method 'RestClientExtensions.HeadAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HeadAsync`1(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="59">Consider a design where 'RestClientExtensions.HeadAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="61">In externally visible method 'RestClientExtensions.HeadAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="60">In externally visible method 'RestClientExtensions.HeadAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Options(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="246">In externally visible method 'RestClientExtensions.Options(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="245">In externally visible method 'RestClientExtensions.Options(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Options`1(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="204">In externally visible method 'RestClientExtensions.Options&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="203">In externally visible method 'RestClientExtensions.Options&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OptionsAsync(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="117">In externally visible method 'RestClientExtensions.OptionsAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="116">In externally visible method 'RestClientExtensions.OptionsAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#OptionsAsync`1(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="66">Consider a design where 'RestClientExtensions.OptionsAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="68">In externally visible method 'RestClientExtensions.OptionsAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="67">In externally visible method 'RestClientExtensions.OptionsAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Patch(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="252">In externally visible method 'RestClientExtensions.Patch(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="251">In externally visible method 'RestClientExtensions.Patch(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Patch`1(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="210">In externally visible method 'RestClientExtensions.Patch&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="209">In externally visible method 'RestClientExtensions.Patch&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PatchAsync(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="124">In externally visible method 'RestClientExtensions.PatchAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="123">In externally visible method 'RestClientExtensions.PatchAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PatchAsync`1(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="73">Consider a design where 'RestClientExtensions.PatchAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="75">In externally visible method 'RestClientExtensions.PatchAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="74">In externally visible method 'RestClientExtensions.PatchAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Post(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="228">In externally visible method 'RestClientExtensions.Post(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="227">In externally visible method 'RestClientExtensions.Post(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Post`1(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="186">In externally visible method 'RestClientExtensions.Post&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="185">In externally visible method 'RestClientExtensions.Post&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostAsync(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="96">In externally visible method 'RestClientExtensions.PostAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="95">In externally visible method 'RestClientExtensions.PostAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostAsync`1(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="45">Consider a design where 'RestClientExtensions.PostAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="47">In externally visible method 'RestClientExtensions.PostAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="46">In externally visible method 'RestClientExtensions.PostAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="234">In externally visible method 'RestClientExtensions.Put(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="233">In externally visible method 'RestClientExtensions.Put(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Put`1(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="192">In externally visible method 'RestClientExtensions.Put&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="191">In externally visible method 'RestClientExtensions.Put&lt;T&gt;(this IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PutAsync(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="103">In externally visible method 'RestClientExtensions.PutAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="102">In externally visible method 'RestClientExtensions.PutAsync(this IRestClient, IRestRequest, Action&lt;IRestResponse, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PutAsync`1(RestSharp.IRestClient,RestSharp.IRestRequest,System.Action`2&lt;RestSharp.IRestResponse`1&lt;!!0&gt;,RestSharp.RestRequestAsyncHandle&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="52">Consider a design where 'RestClientExtensions.PutAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)' doesn't nest generic type 'Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="54">In externally visible method 'RestClientExtensions.PutAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'client' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="53">In externally visible method 'RestClientExtensions.PutAsync&lt;T&gt;(this IRestClient, IRestRequest, Action&lt;IRestResponse&lt;T&gt;, RestRequestAsyncHandle&gt;)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveDefaultParameter(RestSharp.IRestClient,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestClientExtensions.cs" Line="287">In externally visible method 'RestClientExtensions.RemoveDefaultParameter(this IRestClient, string)', validate parameter 'restClient' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RestRequest" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="StringUriOverloadsCallSystemUriOverloads" Category="Microsoft.Design" CheckId="CA1057" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestRequest.cs" Line="64">Refactor 'RestRequest.RestRequest(string)' so that it builds a System.Uri object from 'resource', and then calls 'RestRequest.RestRequest(Uri)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,RestSharp.Method)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="StringUriOverloadsCallSystemUriOverloads" Category="Microsoft.Design" CheckId="CA1057" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestRequest.cs" Line="71">Refactor 'RestRequest.RestRequest(string, Method)' so that it builds a System.Uri object from 'resource', and then calls 'RestRequest.RestRequest(Uri, Method)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Uri,RestSharp.Method)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestRequest.cs" Line="89">In externally visible method 'RestRequest.RestRequest(Uri, Method)', validate parameter 'resource' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFile(System.String,System.Action`1&lt;System.IO.Stream&gt;,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestRequest.cs" Line="270">Replace method 'RestRequest.AddFile(string, Action&lt;Stream&gt;, string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFile(System.String,System.Byte[],System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestRequest.cs" Line="257">Replace method 'RestRequest.AddFile(string, byte[], string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddFile(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestRequest.cs" Line="228">Replace method 'RestRequest.AddFile(string, string, string)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#AddObject(System.Object,System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestRequest.cs" Line="407">'val', a variable, is cast to type 'Array' multiple times in method 'RestRequest.AddObject(object, params string[])'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestRequest.cs" Line="381">In externally visible method 'RestRequest.AddObject(object, params string[])', validate parameter 'obj' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestRequest.cs" Line="386">In externally visible method 'RestRequest.AddObject(object, params string[])', validate parameter 'includedProperties' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Files" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;FileParameter&gt;' in 'RestRequest.Files' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Parameters" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Parameter&gt;' in 'RestRequest.Parameters' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RestRequestAsyncHandle" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#WebRequest" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'RestRequestAsyncHandle.WebRequest' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RestResponse`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#op_Explicit(RestSharp.RestResponse):RestSharp.RestResponse`1&lt;!0&gt;" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="Multiple" Certainty="50" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestResponse.cs" Line="150">Provide a method named 'ToXXX' or 'FromXXX' as an alternate for operator 'RestResponse&lt;T&gt;.explicit operator RestResponse&lt;T&gt;(RestResponse)'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp" File="RestResponse.cs" Line="151">In externally visible method 'RestResponse&lt;T&gt;.explicit operator RestResponse&lt;T&gt;(RestResponse)', validate parameter 'response' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RestResponseBase" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="CriticalWarning">Change the accessibility of all public constructors in 'RestResponseBase' to protected.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Cookies" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'RestResponseBase.Cookies' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Headers" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'RestResponseBase.Headers' to be read-only by removing the property setter.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RawBytes" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'RestResponseBase.RawBytes' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RestResponseCookie" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TimeStamp" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="TimeStamp" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'TimeStamp' in member name 'RestResponseCookie.TimeStamp' exists as a discrete term. If your usage is intended to be single word, case it as 'Timestamp' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SimpleAuthenticator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="SimpleAuthenticator.cs" Line="26">In member 'SimpleAuthenticator.SimpleAuthenticator(string, string, string, string)', the discrete term 'username' in parameter name 'username' should be expressed as a compound word, 'userName'.</Issue>
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="SimpleAuthenticator.cs" Line="26">In member 'SimpleAuthenticator.SimpleAuthenticator(string, string, string, string)', the discrete term 'username' in parameter name 'usernameKey' should be expressed as a compound word, 'userName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Authenticate(RestSharp.IRestClient,RestSharp.IRestRequest)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="SimpleAuthenticator.cs" Line="36">In externally visible method 'SimpleAuthenticator.Authenticate(IRestClient, IRestRequest)', validate parameter 'request' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="RestSharp.Authenticators">
       <Types>
        <Type Name="OAuth1Authenticator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in type name 'OAuth1Authenticator'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#AddOAuthData(RestSharp.IRestClient,RestSharp.IRestRequest,RestSharp.Authenticators.OAuth.OAuthWorkflow)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="208">'OAuth1Authenticator.AddOAuthData(IRestClient, IRestRequest, OAuthWorkflow)' has a cyclomatic complexity of 38. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="279">Call the 'ArgumentOutOfRangeException' constructor that contains a message and/or paramName parameter.</Issue>
             <Issue Name="NoArguments" Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="301">Call the 'ArgumentOutOfRangeException' constructor that contains a message and/or paramName parameter.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="245">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'OAuth1Authenticator.AddOAuthData(IRestClient, IRestRequest, OAuthWorkflow)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="251">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'OAuth1Authenticator.AddOAuthData(IRestClient, IRestRequest, OAuthWorkflow)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="293">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'OAuth1Authenticator.AddOAuthData(IRestClient, IRestRequest, OAuthWorkflow)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="293">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'OAuth1Authenticator.AddOAuthData(IRestClient, IRestRequest, OAuthWorkflow)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForClientAuthentication(System.String,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterShouldBeCompoundWord" Certainty="80" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="150">In member 'OAuth1Authenticator.ForClientAuthentication(string, string, string, string)', the discrete term 'username' in parameter name 'username' should be expressed as a compound word, 'userName'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ForRequestToken(System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="2#" TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="81">Change the type of parameter 'callbackUrl' of method 'OAuth1Authenticator.ForRequestToken(string, string, string)' from string to System.Uri, or provide an overload of 'OAuth1Authenticator.ForRequestToken(string, string, string)', that allows 'callbackUrl' to be passed as a System.Uri object.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAuthorizationHeader(RestSharp.Authenticators.OAuth.WebPairCollection)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.CompareTo(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="314">Because the behavior of 'string.CompareTo(string)' could vary based on the current user's locale settings, replace this call in 'OAuth1Authenticator.GetAuthorizationHeader(WebPairCollection)' with a call to 'string.Compare(string, string, StringComparison)'. If the result of 'string.Compare(string, string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="318">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'OAuth1Authenticator.GetAuthorizationHeader(WebPairCollection)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators" File="OAuth1Authenticator.cs" Line="318">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'OAuth1Authenticator.GetAuthorizationHeader(WebPairCollection)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="RestSharp.Authenticators.OAuth">
       <Types>
        <Type Name="OAuthParameterHandling" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in type name 'OAuthParameterHandling'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="OAuthSignatureMethod" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in type name 'OAuthSignatureMethod'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#HmacSha1" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Sha" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Sha' in member name 'OAuthSignatureMethod.HmacSha1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PlainText" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="PlainText" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'PlainText' in member name 'OAuthSignatureMethod.PlainText' exists as a discrete term. If your usage is intended to be single word, case it as 'Plaintext' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RsaSha1" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Sha" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Sha' in member name 'OAuthSignatureMethod.RsaSha1' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OAuthSignatureTreatment" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in type name 'OAuthSignatureTreatment'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Unescaped" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Unescaped" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Unescaped' in member name 'OAuthSignatureTreatment.Unescaped' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OAuthTools" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth" File="OAuthTools.cs" Line="21">Initialize all static fields in 'OAuthTools' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConcatenateRequestElements(System.String,System.String,RestSharp.Authenticators.OAuth.WebParameterCollection)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth" File="OAuthTools.cs" Line="233">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'OAuthTools.ConcatenateRequestElements(string, string, WebParameterCollection)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConstructRequestUrl(System.Uri)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth" File="OAuthTools.cs" Line="215">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'OAuthTools.ConstructRequestUrl(Uri)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSignature(RestSharp.Authenticators.OAuth.OAuthSignatureMethod,RestSharp.Authenticators.OAuth.OAuthSignatureTreatment,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth" File="OAuthTools.cs" Line="319">In method 'OAuthTools.GetSignature(OAuthSignatureMethod, OAuthSignatureTreatment, string, string, string)', call System.IDisposable.Dispose on object 'crypto' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSignature(RestSharp.Authenticators.OAuth.OAuthSignatureMethod,System.String,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="signatureBase" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth" File="OAuthTools.cs" Line="283">Parameter 'signatureBase' of 'OAuthTools.GetSignature(OAuthSignatureMethod, string, string, string)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTimestamp(System.DateTime)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Int64.ToString" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth" File="OAuthTools.cs" Line="91">Because the behavior of 'long.ToString()' could vary based on the current user's locale settings, replace this call in 'OAuthTools.GetTimestamp(DateTime)' with a call to 'long.ToString(IFormatProvider)'. If the result of 'long.ToString(IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OAuthType" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in type name 'OAuthType'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="OAuthWebQueryInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Auth" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Auth' in type name 'OAuthWebQueryInfo'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ClientUsername" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Username" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeCompoundWord" Certainty="80" Level="Error">The discrete term 'Username' in member name 'OAuthWebQueryInfo.ClientUsername' should be expressed as a compound word, 'UserName'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="RestSharp.Authenticators.OAuth.Extensions">
       <Types>
        <Type Name="OAuthExtensions" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#ToRequestValue(RestSharp.Authenticators.OAuth.OAuthSignatureMethod)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth\Extensions" File="OAuthExtensions.cs" Line="11">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'OAuthExtensions.ToRequestValue(this OAuthSignatureMethod)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.IndexOf(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth\Extensions" File="OAuthExtensions.cs" Line="12">Because the behavior of 'string.IndexOf(string)' could vary based on the current user's locale settings, replace this call in 'OAuthExtensions.ToRequestValue(this OAuthSignatureMethod)' with a call to 'string.IndexOf(string, StringComparison)'. If the result of 'string.IndexOf(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringExtensions" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#FormatWith(System.String,System.Object[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth\Extensions" File="StringExtensions.cs" Line="37">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'StringExtensions.FormatWith(this string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsNullOrBlank(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth\Extensions" File="StringExtensions.cs" Line="21">Replace the call to 'string.operator ==(string, string)' in 'StringExtensions.IsNullOrBlank(this string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseQueryString(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth\Extensions" File="StringExtensions.cs" Line="90">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'StringExtensions.ParseQueryString(this string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth\Extensions" File="StringExtensions.cs" Line="92">Replace the call to 'string.Equals(string)' in 'StringExtensions.ParseQueryString(this string)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PercentEncode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Authenticators\OAuth\Extensions" File="StringExtensions.cs" Line="82">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'StringExtensions.PercentEncode(this string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="RestSharp.Contrib">
       <Types>
        <Type Name="HttpEncoder" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HtmlEncoder.cs" Line="42">Initialize all static fields in 'HttpEncoder' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EncodeHeaderString(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HtmlEncoder.cs" Line="152">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'HttpEncoder.EncodeHeaderString(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HtmlDecode(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HtmlEncoder.cs" Line="409">'HttpEncoder.HtmlDecode(string)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitEntities()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="Method" Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HtmlEncoder.cs" Line="699">'HttpEncoder.InitEntities()' has a maintainability index of 20. Rewrite or refactor the method to increase its maintainability index (MI). An MI below 10 indicates poor maintainability, an MI between 10 and 20 indicates moderate maintainability, and an MI above 20 indicates good maintainability.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HtmlEncoder.cs" Line="253">In method 'HttpEncoder.UrlEncodeToBytes(byte[], int, int)', call System.IDisposable.Dispose on object 'result' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlPathEncode(System.String)" Kind="Method" Static="True" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HtmlEncoder.cs" Line="227">In method 'HttpEncoder.UrlPathEncode(string)', call System.IDisposable.Dispose on object 'result' before all references to it are out of scope.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HttpUtility" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'HttpUtility' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#HtmlAttributeEncode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="67">In method 'HttpUtility.HtmlAttributeEncode(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HtmlAttributeEncode(System.String,System.IO.TextWriter)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Reserved" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="55">'HttpUtility.HtmlAttributeEncode(string, TextWriter)' creates an exception of type 'NullReferenceException', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="49">In method 'HttpUtility.HtmlAttributeEncode(string, TextWriter)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HtmlDecode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="516">In method 'HttpUtility.HtmlDecode(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HtmlDecode(System.String,System.IO.TextWriter)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Reserved" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="543">'HttpUtility.HtmlDecode(string, TextWriter)' creates an exception of type 'NullReferenceException', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="537">In method 'HttpUtility.HtmlDecode(string, TextWriter)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HtmlEncode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="558">In method 'HttpUtility.HtmlEncode(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HtmlEncode(System.String,System.IO.TextWriter)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Reserved" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="585">'HttpUtility.HtmlEncode(string, TextWriter)' creates an exception of type 'NullReferenceException', an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="579">In method 'HttpUtility.HtmlEncode(string, TextWriter)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlDecode(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="244">In method 'HttpUtility.UrlDecode(byte[], int, int, Encoding)', call System.IDisposable.Dispose on object 'acc' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="227">In method 'HttpUtility.UrlDecode(byte[], int, int, Encoding)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="227">In member 'HttpUtility.UrlDecode(byte[], int, int, Encoding)', consider replacing the data type identifier 'bytes' in parameter name 'bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="227">Change the return type of 'HttpUtility.UrlDecode(byte[], int, int, Encoding)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlDecode(System.Byte[],System.Text.Encoding)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="162">In method 'HttpUtility.UrlDecode(byte[], Encoding)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="162">In member 'HttpUtility.UrlDecode(byte[], Encoding)', consider replacing the data type identifier 'bytes' in parameter name 'bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="162">Change the return type of 'HttpUtility.UrlDecode(byte[], Encoding)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlDecode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="83">In method 'HttpUtility.UrlDecode(string)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="83">Change the return type of 'HttpUtility.UrlDecode(string)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlDecode(System.String,System.Text.Encoding)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="104">In method 'HttpUtility.UrlDecode(string, Encoding)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="104">In method 'HttpUtility.UrlDecode(string, Encoding)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="104">Change the return type of 'HttpUtility.UrlDecode(string, Encoding)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlDecodeToBytes(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="307">In member 'HttpUtility.UrlDecodeToBytes(byte[])', consider replacing the data type identifier 'bytes' in parameter name 'bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="346">In method 'HttpUtility.UrlDecodeToBytes(byte[], int, int)', call System.IDisposable.Dispose on object 'result' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="331">In member 'HttpUtility.UrlDecodeToBytes(byte[], int, int)', consider replacing the data type identifier 'bytes' in parameter name 'bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlDecodeToBytes(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="315">In method 'HttpUtility.UrlDecodeToBytes(string)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlDecodeToBytes(System.String,System.Text.Encoding)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="320">In method 'HttpUtility.UrlDecodeToBytes(string, Encoding)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="320">In method 'HttpUtility.UrlDecodeToBytes(string, Encoding)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncode(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="416">In member 'HttpUtility.UrlEncode(byte[])', consider replacing the data type identifier 'bytes' in parameter name 'bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="416">Change the return type of 'HttpUtility.UrlEncode(byte[])' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncode(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="429">In member 'HttpUtility.UrlEncode(byte[], int, int)', consider replacing the data type identifier 'bytes' in parameter name 'bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="429">Change the return type of 'HttpUtility.UrlEncode(byte[], int, int)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="375">In method 'HttpUtility.UrlEncode(string)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="375">Change the return type of 'HttpUtility.UrlEncode(string)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncode(System.String,System.Text.Encoding)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Enc" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="85" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="380">In member 'HttpUtility.UrlEncode(string, Encoding)', correct the casing of 'Enc' in parameter name 'Enc' by changing it to 'enc'.</Issue>
            </Message>
            <Message Id="Enc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="380">In method 'HttpUtility.UrlEncode(string, Encoding)', correct the spelling of 'Enc' in parameter name 'Enc' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="380">In method 'HttpUtility.UrlEncode(string, Encoding)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="384">Replace the call to 'string.operator ==(string, string)' in 'HttpUtility.UrlEncode(string, Encoding)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="380">Change the return type of 'HttpUtility.UrlEncode(string, Encoding)' from string to System.Uri.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="408">In externally visible method 'HttpUtility.UrlEncode(string, Encoding)', validate parameter 'Enc' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncodeToBytes(System.Byte[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="460">In member 'HttpUtility.UrlEncodeToBytes(byte[])', consider replacing the data type identifier 'bytes' in parameter name 'bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="bytes" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="471">In member 'HttpUtility.UrlEncodeToBytes(byte[], int, int)', consider replacing the data type identifier 'bytes' in parameter name 'bytes' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncodeToBytes(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="442">In method 'HttpUtility.UrlEncodeToBytes(string)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncodeToBytes(System.String,System.Text.Encoding)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="e" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="447">In method 'HttpUtility.UrlEncodeToBytes(string, Encoding)', consider providing a more meaningful name than parameter name 'e'.</Issue>
            </Message>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="447">In method 'HttpUtility.UrlEncodeToBytes(string, Encoding)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="454">In externally visible method 'HttpUtility.UrlEncodeToBytes(string, Encoding)', validate parameter 'e' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncodeUnicode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="483">In method 'HttpUtility.UrlEncodeUnicode(string)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="483">Change the return type of 'HttpUtility.UrlEncodeUnicode(string)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncodeUnicodeToBytes(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="500">In method 'HttpUtility.UrlEncodeUnicodeToBytes(string)', call System.IDisposable.Dispose on object 'result' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="str" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="493">In method 'HttpUtility.UrlEncodeUnicodeToBytes(string)', correct the spelling of 'str' in parameter name 'str' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlPathEncode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="s" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="698">In method 'HttpUtility.UrlPathEncode(string)', consider providing a more meaningful name than parameter name 's'.</Issue>
            </Message>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions\MonoHttp" File="HttpUtility.cs" Line="698">Change the return type of 'HttpUtility.UrlPathEncode(string)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="RestSharp.Deserializers">
       <Types>
        <Type Name="DotNetXmlDeserializer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Deserializer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Deserializer' in type name 'DotNetXmlDeserializer'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Deserialize`1(RestSharp.IRestResponse)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="DotNetXmlDeserializer.cs" Line="35">In externally visible method 'DotNetXmlDeserializer.Deserialize&lt;T&gt;(IRestResponse)', validate parameter 'response' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IDeserializer" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Deserializer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Deserializer' in type name 'IDeserializer'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Namespace" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Namespace" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'IDeserializer.Namespace' so that it no longer conflicts with the reserved language keyword 'Namespace'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JsonDeserializer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Deserializer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Deserializer' in type name 'JsonDeserializer'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#BuildList(System.Type,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="JsonDeserializer.cs" Line="153">'parent', a parameter, is cast to type 'IList' multiple times in method 'JsonDeserializer.BuildList(Type, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ConvertValue(System.Type,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="JsonDeserializer.cs" Line="192">'JsonDeserializer.ConvertValue(Type, object)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Deserialize`1(RestSharp.IRestResponse)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="JsonDeserializer.cs" Line="36">In externally visible method 'JsonDeserializer.Deserialize&lt;T&gt;(IRestResponse)', validate parameter 'response' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlAttributeDeserializer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Deserializer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Deserializer' in type name 'XmlAttributeDeserializer'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="XmlDeserializer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Deserializer" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Deserializer' in type name 'XmlDeserializer'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CreateAndMap(System.Type,System.Xml.Linq.XElement)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="t" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="383">In method 'XmlDeserializer.CreateAndMap(Type, XElement)', consider providing a more meaningful name than parameter name 't'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="390">In externally visible method 'XmlDeserializer.CreateAndMap(Type, XElement)', validate parameter 't' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="388">In externally visible method 'XmlDeserializer.CreateAndMap(Type, XElement)', validate parameter 'element' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Deserialize`1(RestSharp.IRestResponse)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="47">In externally visible method 'XmlDeserializer.Deserialize&lt;T&gt;(IRestResponse)', validate parameter 'response' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttributeByName(System.Xml.Linq.XElement,System.Xml.Linq.XName)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="468">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'XmlDeserializer.GetAttributeByName(XElement, XName)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="475">In externally visible method 'XmlDeserializer.GetAttributeByName(XElement, XName)', validate parameter 'root' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="468">In externally visible method 'XmlDeserializer.GetAttributeByName(XElement, XName)', validate parameter 'name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetElementByName(System.Xml.Linq.XElement,System.Xml.Linq.XName)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="434">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'XmlDeserializer.GetElementByName(XElement, XName)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="463">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'XmlDeserializer.GetElementByName(XElement, XName)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="437">In externally visible method 'XmlDeserializer.GetElementByName(XElement, XName)', validate parameter 'root' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="434">In externally visible method 'XmlDeserializer.GetElementByName(XElement, XName)', validate parameter 'name' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#HandleListDerivative(System.Object,System.Xml.Linq.XElement,System.String,System.Type)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="x" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="329">Parameter 'x' of 'XmlDeserializer.HandleListDerivative(object, XElement, string, Type)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="347">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'XmlDeserializer.HandleListDerivative(object, XElement, string, Type)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="364">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'XmlDeserializer.HandleListDerivative(object, XElement, string, Type)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Map(System.Object,System.Xml.Linq.XElement)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="104">'XmlDeserializer.Map(object, XElement)' has a cyclomatic complexity of 34. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="214">Modify 'XmlDeserializer.Map(object, XElement)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="104">In method 'XmlDeserializer.Map(object, XElement)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="166">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'XmlDeserializer.Map(object, XElement)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.DateTimeOffset.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="225">Because the behavior of 'DateTimeOffset.Parse(string)' could vary based on the current user's locale settings, replace this call in 'XmlDeserializer.Map(object, XElement)' with a call to 'DateTimeOffset.Parse(string, IFormatProvider)'. If the result of 'DateTimeOffset.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="105">In externally visible method 'XmlDeserializer.Map(object, XElement)', validate parameter 'x' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="142">In externally visible method 'XmlDeserializer.Map(object, XElement)', validate parameter 'root' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveNamespace(System.Xml.Linq.XDocument)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Deserializers" File="XmlDeserializer.cs" Line="80">The 'this' parameter (or 'Me' in Visual Basic) of 'XmlDeserializer.RemoveNamespace(XDocument)' is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="RestSharp.Extensions">
       <Types>
        <Type Name="MiscExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CopyTo(System.IO.Stream,System.IO.Stream)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="MiscExtensions.cs" Line="72">In externally visible method 'MiscExtensions.CopyTo(this Stream, Stream)', validate parameter 'input' before using it.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="MiscExtensions.cs" Line="77">In externally visible method 'MiscExtensions.CopyTo(this Stream, Stream)', validate parameter 'output' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ReadAsBytes(System.IO.Stream)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="MiscExtensions.cs" Line="52">In externally visible method 'MiscExtensions.ReadAsBytes(this Stream)', validate parameter 'input' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ReflectionExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ChangeType(System.Object,System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="ReflectionExtensions.cs" Line="77">Because the behavior of 'Convert.ChangeType(object, Type)' could vary based on the current user's locale settings, replace this call in 'ReflectionExtensions.ChangeType(this object, Type)' with a call to 'Convert.ChangeType(object, Type, IFormatProvider)'. If the result of 'Convert.ChangeType(object, Type, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="ReflectionExtensions.cs" Line="84">Consider changing the type of parameter 'culture' in 'ReflectionExtensions.ChangeType(this object, Type, CultureInfo)' from 'CultureInfo' to its base type 'IFormatProvider'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAttribute`1(System.Type)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="ReflectionExtensions.cs" Line="47">Consider changing the type of parameter 'type' in 'ReflectionExtensions.GetAttribute&lt;T&gt;(this Type)' from 'Type' to its base type 'MemberInfo'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ResponseExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ToAsyncResponse`1(RestSharp.IRestResponse)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="ResponseExtensions.cs" Line="8">In externally visible method 'ResponseExtensions.ToAsyncResponse&lt;T&gt;(this IRestResponse)', validate parameter 'response' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddUnderscorePrefix(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="385">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'StringExtensions.AddUnderscorePrefix(this string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExtractDate(System.String,System.String,System.Globalization.CultureInfo)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ToInt64(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="228">Because the behavior of 'Convert.ToInt64(string)' could vary based on the current user's locale settings, replace this call in 'StringExtensions.ExtractDate(string, string, CultureInfo)' with a call to 'Convert.ToInt64(string, IFormatProvider)'. If the result of 'Convert.ToInt64(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsUpperCase(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="UpperCase" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="342">The compound word 'UpperCase' in member name 'StringExtensions.IsUpperCase(this string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Uppercase' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="string" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="342">In member 'StringExtensions.IsUpperCase(this string)', consider replacing the data type identifier 'String' in parameter name 'inputString' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MakeInitialLowerCase(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LowerCase" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="332">The compound word 'LowerCase' in member name 'StringExtensions.MakeInitialLowerCase(this string)' exists as a discrete term. If your usage is intended to be single word, case it as 'Lowercase' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="333">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'StringExtensions.MakeInitialLowerCase(this string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="333">In externally visible method 'StringExtensions.MakeInitialLowerCase(this string)', validate parameter 'word' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseJsonDate(System.String,System.Globalization.CultureInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="132">Modify 'StringExtensions.ParseJsonDate(this string, CultureInfo)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="System.Int64.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="130">Because the behavior of 'long.Parse(string)' could vary based on the current user's locale settings, replace this call in 'StringExtensions.ParseJsonDate(this string, CultureInfo)' with a call to 'long.Parse(string, IFormatProvider)'. If the result of 'long.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="122">In externally visible method 'StringExtensions.ParseJsonDate(this string, CultureInfo)', validate parameter 'input' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveSurroundingQuotes(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.EndsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="164">Because the behavior of 'string.EndsWith(string)' could vary based on the current user's locale settings, replace this call in 'StringExtensions.RemoveSurroundingQuotes(this string)' with a call to 'string.EndsWith(string, StringComparison)'. If the result of 'string.EndsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="System.String.StartsWith(System.String)" TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="164">Because the behavior of 'string.StartsWith(string)' could vary based on the current user's locale settings, replace this call in 'StringExtensions.RemoveSurroundingQuotes(this string)' with a call to 'string.StartsWith(string, StringComparison)'. If the result of 'string.StartsWith(string, StringComparison)' will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="164">In externally visible method 'StringExtensions.RemoveSurroundingQuotes(this string)', validate parameter 'input' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveUnderscoresAndDashes(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="111">In externally visible method 'StringExtensions.RemoveUnderscoresAndDashes(this string)', validate parameter 'input' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlDecode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="42">Change the return type of 'StringExtensions.UrlDecode(this string)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UrlEncode(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Certainty="60" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="StringExtensions.cs" Line="52">Change the return type of 'StringExtensions.UrlEncode(this string)' from string to System.Uri.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AsNamespaced(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Namespaced" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Extensions" File="XmlExtensions.cs" Line="33">Correct the spelling of 'Namespaced' in member name 'XmlExtensions.AsNamespaced(this string, string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="RestSharp.Serializers">
       <Types>
        <Type Name="DotNetXmlSerializer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Serialize(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Name="NonExceptionEdge" Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="DotNetXmlSerializer.cs" Line="43">In method 'DotNetXmlSerializer.Serialize(object)', call System.IDisposable.Dispose on object 'writer' before all references to it are out of scope.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="DotNetXmlSerializer.cs" Line="42">In externally visible method 'DotNetXmlSerializer.Serialize(object)', validate parameter 'obj' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DotNetXmlSerializer+EncodingStringWriter" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.Text.Encoding)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.IO.StringWriter.#ctor" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="DotNetXmlSerializer.cs" Line="82">Because the behavior of 'StringWriter.StringWriter()' could vary based on the current user's locale settings, replace this call in 'DotNetXmlSerializer.EncodingStringWriter.EncodingStringWriter(Encoding)' with a call to 'StringWriter.StringWriter(IFormatProvider)'. If the result of 'StringWriter.StringWriter(IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ISerializer" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Namespace" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Namespace" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'ISerializer.Namespace' so that it no longer conflicts with the reserved language keyword 'Namespace'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Serialize(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error">In member 'ISerializer.Serialize(object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NameStyle" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#LowerCase" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="LowerCase" TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
             <Issue Name="MemberShouldBeDiscreteTerm" Certainty="80" Level="Error">The compound word 'LowerCase' in member name 'NameStyle.LowerCase' exists as a discrete term. If your usage is intended to be single word, case it as 'Lowercase' or strip the first token entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SerializeAsAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#TransformName(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="SerializeAsAttribute.cs" Line="81">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'SerializeAsAttribute.TransformName(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlSerializer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetSerializedValue(System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="XmlSerializer.cs" Line="205">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'XmlSerializer.GetSerializedValue(object)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Map(System.Xml.Linq.XElement,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="XmlSerializer.cs" Line="110">'XmlSerializer.Map(XElement, object)' has a cyclomatic complexity of 28. Rewrite or refactor the method to reduce complexity to 25.</Issue>
            </Message>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="XmlSerializer.cs" Line="168">'rawValue', a variable, is cast to type 'IList' multiple times in method 'XmlSerializer.Map(XElement, object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="XmlSerializer.cs" Line="170">Replace the call to 'string.operator ==(string, string)' in 'XmlSerializer.Map(XElement, object)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Serialize(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="XmlSerializer.cs" Line="72">'obj', a parameter, is cast to type 'IList' multiple times in method 'XmlSerializer.Serialize(object)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="XmlSerializer.cs" Line="82">Replace the call to 'string.operator ==(string, string)' in 'XmlSerializer.Serialize(object)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Serializers" File="XmlSerializer.cs" Line="57">In externally visible method 'XmlSerializer.Serialize(object)', validate parameter 'obj' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="RestSharp.Validation">
       <Types>
        <Type Name="Require" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Require' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Validate" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Error">Because type 'Validate' contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#IsBetween(System.Int32,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Validation" File="Validate.cs" Line="36">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'Validate.IsBetween(int, int, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#IsValidLength(System.String,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2015-08-16 15:45:40Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="c:\Users\wolfy\Documents\GitHub\RestSharpHighQualityCodeTeamProject\RestSharp\Validation" File="Validate.cs" Line="52">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'Validate.IsValidLength(string, int)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AbstractTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1012">
   <Name>Abstract types should not have constructors</Name>
   <Description>Public constructors for abstract types do not make sense because you cannot create instances of abstract types.</Description>
   <Resolution Name="Default">Change the accessibility of all public constructors in {0} to protected.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182126.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidExcessiveComplexity" Category="Microsoft.Maintainability" CheckId="CA1502">
   <Name>Avoid excessive complexity</Name>
   <Description>Method implementations that are exceedingly complex increase the challenge of understanding and maintaining code.</Description>
   <Resolution Name="Default">{0} has a cyclomatic complexity of {1}. Rewrite or refactor the method to reduce complexity to {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182212.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">{0} appears to have no upstream public or protected callers.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnmaintainableCode" Category="Microsoft.Maintainability" CheckId="CA1505">
   <Name>Avoid unmaintainable code</Name>
   <Description>Types and methods with a high degree of class coupling, cyclomatic complexity and/or program length can be difficult to maintain.</Description>
   <Resolution Name="Method">{0} has a maintainability index of {1}. Rewrite or refactor the method to increase its maintainability index (MI). An MI below {2} indicates poor maintainability, an MI between {2} and {3} indicates moderate maintainability, and an MI above {3} indicates good maintainability.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386043.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="CompoundWordsShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1702">
   <Name>Compound words should be cased correctly</Name>
   <Description>Avoid creating compound words from terms which exist in the dictionary as discrete terms. Do not create a compound word such as 'StopWatch' or 'PopUp'. These terms are recognized in the dictionary and should be cased as 'Stopwatch' and 'Popup'.</Description>
   <Resolution Name="MemberParameterShouldBeCompoundWord">In member {0}, the discrete term '{1}' in parameter name {2} should be expressed as a compound word, '{3}'.</Resolution>
   <Resolution Name="MemberShouldBeCompoundWord">The discrete term '{0}' in member name {1} should be expressed as a compound word, '{2}'.</Resolution>
   <Resolution Name="MemberShouldBeDiscreteTerm">The compound word '{0}' in member name {1} exists as a discrete term. If your usage is intended to be single word, case it as '{2}' or strip the first token entirely if it represents any sort of Hungarian notation.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264474.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="80">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Dispose objects before losing scope" Category="Microsoft.Reliability" CheckId="CA2000">
   <Name>Dispose objects before losing scope</Name>
   <Description>If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.</Description>
   <Resolution Name="NonExceptionEdge">In method {0}, call System.IDisposable.Dispose on object {1} before all references to it are out of scope.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182289.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 459</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Resolution Name="Parameter">{0}, a parameter, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseReservedExceptionTypes" Category="Microsoft.Usage" CheckId="CA2201">
   <Name>Do not raise reserved exception types</Name>
   <Description>User code should not create and raise exceptions of certain types that are reserved by the runtime or which are of a too general exception type. Exception types that are too general include Exception, SystemException, and ApplicationException. Exception types that are reserved by the runtime include ThreadAbortException, OutOfMemoryException, ExecutionEngineException, and IndexOutOfRangeException.</Description>
   <Resolution Name="Reserved">{0} creates an exception of type {1}, an exception type that is reserved by the runtime and should never be raised by managed code. If this exception instance might be thrown, use a different exception type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182338.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="MemberParameter">In member {0}, correct the casing of '{1}' in parameter name {2} by changing it to '{3}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="NoArguments">Call the {0} constructor that contains a message and/or paramName parameter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="MarkMembersAsStatic" Category="Microsoft.Performance" CheckId="CA1822">
   <Name>Mark members as static</Name>
   <Description>Methods which do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After doing so, the compiler will emit non-virtual call sites to these members which will prevent a check at runtime for each call that ensures the current object pointer is non-null. This can result in a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.</Description>
   <Resolution Name="Default">The 'this' parameter (or 'Me' in Visual Basic) of {0} is never used. Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body or at least one property accessor, if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245046.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="NormalizeStringsToUppercase" Category="Microsoft.Globalization" CheckId="CA1308">
   <Name>Normalize strings to uppercase</Name>
   <Description>Strings should be normalized to upper-case.</Description>
   <Resolution Name="ToUpperInvariant">In method {0}, replace the call to {1} with String.ToUpperInvariant().</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386042.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
   <Name>Operator overloads have named alternates</Name>
   <Description>When redefining operators, implement named methods to provide access to the operator functionality from languages that do not support operator overloading. For example, the functionality of the '+' operator should also be accessible using an 'Add' method.</Description>
   <Resolution Name="Multiple">Provide a method named '{0}' or '{1}' as an alternate for operator {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182355.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideEqualsAndOperatorEqualsOnValueTypes" Category="Microsoft.Performance" CheckId="CA1815">
   <Name>Override equals and operator equals on value types</Name>
   <Description>The default System.ValueType implementation might not perform as well as a custom implementation.</Description>
   <Resolution Name="Equals">{0} should override Equals.</Resolution>
   <Resolution Name="op_Equality">{0} should override the equality (==) and inequality (!=) operators.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182276.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="PropertyNamesShouldNotMatchGetMethods" Category="Microsoft.Naming" CheckId="CA1721">
   <Name>Property names should not match get methods</Name>
   <Description>A Get method was found with the same name as a property. Get methods and properties should have names that clearly distinguish their function. See the design guidelines for information regarding choosing properties over methods.</Description>
   <Resolution Name="BaseType">The property name {0} is confusing given the existence of inherited method {1}. Rename or remove this property.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182253.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyStringComparison" Category="Microsoft.Globalization" CheckId="CA1307">
   <Name>Specify StringComparison</Name>
   <Description>If an overload exists that takes a StringComparison argument, it should always be called in favor of an overload that does not.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, such as when sorting a list of items for display in a list box, specify 'StringComparison.CurrentCulture' or 'StringComparison.CurrentCultureIgnoreCase' as the 'StringComparison' parameter. If comparing case-insensitive identifiers, such as file paths, environment variables, or registry keys and values, specify 'StringComparison.OrdinalIgnoreCase'. Otherwise, if comparing case-sensitive identifiers, specify 'StringComparison.Ordinal'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386080.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="Default">Because type {0} contains only 'static' ('Shared' in Visual Basic) members, add a default private constructor to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="StringUriOverloadsCallSystemUriOverloads" Category="Microsoft.Design" CheckId="CA1057">
   <Name>String URI overloads call System.Uri overloads</Name>
   <Description>If a method overloads another method by replacing a System.Uri parameter with a string, then the string overload should simply build a Uri object from the string, and pass the result to the string overload.</Description>
   <Resolution Name="Default">Refactor {0} so that it builds a System.Uri object from {1}, and then calls {2}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182170.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UriParametersShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1054">
   <Name>URI parameters should not be strings</Name>
   <Description>If a parameter name contains "uri" or "url" or "urn", and it's typed as string, the parameter type should be changed to System.Uri, unless there is an overload method where the same parameter is typed as System.Uri.</Description>
   <Resolution Name="Default">Change the type of parameter {0} of method {1} from string to System.Uri, or provide an overload of {1}, that allows {0} to be passed as a System.Uri object.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182174.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="UriReturnValuesShouldNotBeStrings" Category="Microsoft.Design" CheckId="CA1055">
   <Name>URI return values should not be strings</Name>
   <Description>If a function name contains "uri" or "url" or "urn" and the return type is string, the return type should be changed to System.Uri.</Description>
   <Resolution Name="Default">Change the return type of {0} from string to System.Uri.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182176.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="designrules.dll" Version="12.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="12.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
